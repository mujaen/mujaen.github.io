<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-02-07T20:27:03+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jinjer’s Blog</title><subtitle>실무에 도움되는&lt;br&gt; 개발자 기술블로그.</subtitle><entry><title type="html">React + Socket.io로 만드는 채팅 애플리케이션(3)</title><link href="http://localhost:4000/blog/2021/02/07/react-socketio-with-nodejs.html" rel="alternate" type="text/html" title="React + Socket.io로 만드는 채팅 애플리케이션(3)" /><published>2021-02-07T00:00:00+09:00</published><updated>2021-02-07T20:27:03+09:00</updated><id>http://localhost:4000/blog/2021/02/07/react-socketio-with-nodejs</id><content type="html" xml:base="http://localhost:4000/blog/2021/02/07/react-socketio-with-nodejs.html">&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#server&quot; id=&quot;markdown-toc-server&quot;&gt;Server&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#packagejson&quot; id=&quot;markdown-toc-packagejson&quot;&gt;Package.json&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#serverjs&quot; id=&quot;markdown-toc-serverjs&quot;&gt;Server.js&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#socketio&quot; id=&quot;markdown-toc-socketio&quot;&gt;Socket.io&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#events&quot; id=&quot;markdown-toc-events&quot;&gt;events&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;

&lt;p&gt;이번 포스팅에서는 Socket.io를 서버에 적용해서 데이터를 주고받는 방법을 알아볼 겁니다    &lt;br /&gt;
Express 서버를 생성하기 위한 프로젝트 폴더를 하나 만들고 터미널을 열어 아래의 명령어를 입력해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;express socket.io
npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nodemon &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Express 서버 구동은 &lt;a href=&quot;https://mujaen.github.io/blog/2021/01/05/nodejs-express-mongodb-mongoose.html&quot; target=&quot;_blank&quot;&gt;이전 포스팅&lt;/a&gt;을 참고해 주세요!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;packagejson&quot;&gt;Package.json&lt;/h3&gt;

&lt;p&gt;Package.json 파일을 열고 nodemon 옵션으로 스크립트를 하나 추가합니다&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;nodemon server&quot;
  },
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;^4.17.1&quot;,
    &quot;socket.io&quot;: &quot;^3.1.1&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;nodemon&quot;: &quot;^2.0.7&quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;serverjs&quot;&gt;Server.js&lt;/h3&gt;

&lt;p&gt;서버를 구동시켜 줄 메인 스크립트 파일을 만들 겁니다. 루트 경로에 server.js를 만들고 아래와 같이 설정합니다.  &lt;br /&gt;
기본적으로 서버는 3000번 포트를 사용하지만 원할 시 변경할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socketio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;socket.io&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socketio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Socket io&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;send message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;receive message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;user disconnected&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//서버 연결&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Express server has started on port 3000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;socketio&quot;&gt;Socket.io&lt;/h2&gt;

&lt;p&gt;메인 스크립트를 한번 쭉 살펴보죠 Express의 Server(3000포트)를 구동시킨 뒤 Socket.io로  &lt;br /&gt;
수신을 하기 위해 아래와 같이 지정해 줍니다&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socketio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘Access-Control-Allow-Origin’오류 발생을 막기 위해 cors 옵션을 지정해야 합니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;events&quot;&gt;events&lt;/h3&gt;

&lt;p&gt;클라이언트에서 서버로 연결이 되면 자동으로 ‘connection’이 되면서 이벤트 함수가 실행됩니다   &lt;br /&gt;
반대로 클라이언트에서 연결이 끊어지거나 강제로 종료하게 된다면 ‘disconnect’ 이벤트가 실행됩니다&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;send message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;receive message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;user disconnected&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;emit: 지정한 이벤트를 내보낼 때 사용합니다&lt;/li&gt;
  &lt;li&gt;on: 내보낸 이벤트를 받아서 실행할 때 사용합니다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;자세한 내용은 &lt;a href=&quot;https://socket.io/docs/v3/emitting-events/&quot; target=&quot;_blank&quot;&gt;공식문서&lt;/a&gt;를 참고해 주세요&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="blog" /><category term="react" /><summary type="html"></summary></entry><entry><title type="html">React + Socket.io로 만드는 채팅 애플리케이션(2)</title><link href="http://localhost:4000/blog/2021/02/04/react-with-prettier.html" rel="alternate" type="text/html" title="React + Socket.io로 만드는 채팅 애플리케이션(2)" /><published>2021-02-04T00:00:00+09:00</published><updated>2021-02-07T17:49:11+09:00</updated><id>http://localhost:4000/blog/2021/02/04/react-with-prettier</id><content type="html" xml:base="http://localhost:4000/blog/2021/02/04/react-with-prettier.html">&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prettier&quot; id=&quot;markdown-toc-prettier&quot;&gt;Prettier&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#prettierignore&quot; id=&quot;markdown-toc-prettierignore&quot;&gt;.prettierignore&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#포맷&quot; id=&quot;markdown-toc-포맷&quot;&gt;포맷&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#options&quot; id=&quot;markdown-toc-options&quot;&gt;Options&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#tab-width&quot; id=&quot;markdown-toc-tab-width&quot;&gt;Tab Width&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#semicolons&quot; id=&quot;markdown-toc-semicolons&quot;&gt;Semicolons&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prettier&quot;&gt;Prettier&lt;/h2&gt;

&lt;p&gt;이번 포스팅에서는 가장 대중적인 코드 포맷터인 Prettier를 적용해 보도록 할 건데요 &lt;br /&gt;
만약 Prittier 사용을 원하지 않는다면 다음 포스팅으로 넘어가도 전체적인 흐름에 영향이 없습니다   &lt;br /&gt;
IDE에서 린터를 지원하지 않는다면 따로 설치가 필요합니다 터미널을 열어 아래의 명령어를 입력해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save-exact&lt;/span&gt; prettier
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;exact 옵션을 사용하면 버전이 바뀌면서 생기는 스타일의 변화에 대응할 수 있습니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;prettierignore&quot;&gt;.prettierignore&lt;/h3&gt;

&lt;p&gt;Prittier가 설치되면 루트 경로에 .prettierignore 파일을 생성하고 아래와 같이 포맷하지 않을 파일을 Ignore 처리합니다&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Ignore artifacts:&lt;/span&gt;
build
coverage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;포맷&quot;&gt;포맷&lt;/h3&gt;

&lt;p&gt;Ignore 설정을 했다면 포맷을 하기 위해 터미널을 열고 아래의 명령어를 입력해 줍니다&lt;br /&gt;
‘src’ 경로의 파일 형식에 대해서만 포맷을 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx prettier &lt;span class=&quot;nt&quot;&gt;--write&lt;/span&gt; src/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘npx prettier –write .’ 을 하게되면 루트 경로부터 모든형식에 지정되어 프로젝트가 커질수록 시간이 지연됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;options&quot;&gt;Options&lt;/h2&gt;

&lt;p&gt;루트 경로에 prettier.config.js 파일을 하나 만들어 주세요 &lt;br /&gt;
아래의 옵션을 사용하여 들여 쓰기, 공백 사용, 세미콜론, 브래킷 간격 등 포맷 시에 옵션을 지정할 수 있습니다&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tabWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;semi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tab-width&quot;&gt;Tab Width&lt;/h3&gt;

&lt;p&gt;들여 쓰기 시 공백 수를 지정합니다&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Default&lt;/td&gt;
      &lt;td&gt;CLI Override&lt;/td&gt;
      &lt;td&gt;API Override&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;–tab-width &amp;lt;int&amp;gt;&lt;/td&gt;
      &lt;td&gt;tabWidth: &amp;lt;int&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;semicolons&quot;&gt;Semicolons&lt;/h3&gt;

&lt;p&gt;명령문 마지막에 세미콜론을 추가합니다&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Default&lt;/td&gt;
      &lt;td&gt;CLI Override&lt;/td&gt;
      &lt;td&gt;API Override&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;–no-semi&lt;/td&gt;
      &lt;td&gt;semi: &amp;lt;bool&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;이외에 추가 옵션 사항은 &lt;a href=&quot;https://prettier.io/docs/en/options.html&quot; target=&quot;_blank&quot;&gt;Prettier 공식문서&lt;/a&gt;를 참고해 주세요!&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="blog" /><category term="react" /><summary type="html"></summary></entry><entry><title type="html">React + Socket.io로 만드는 채팅 애플리케이션(1)</title><link href="http://localhost:4000/blog/2021/02/01/react-without-create-react-app.html" rel="alternate" type="text/html" title="React + Socket.io로 만드는 채팅 애플리케이션(1)" /><published>2021-02-01T00:00:00+09:00</published><updated>2021-02-07T19:42:09+09:00</updated><id>http://localhost:4000/blog/2021/02/01/react-without-create-react-app</id><content type="html" xml:base="http://localhost:4000/blog/2021/02/01/react-without-create-react-app.html">&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#process&quot; id=&quot;markdown-toc-process&quot;&gt;Process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#packagejson&quot; id=&quot;markdown-toc-packagejson&quot;&gt;Package.json&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#babel&quot; id=&quot;markdown-toc-babel&quot;&gt;Babel&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#babelrc&quot; id=&quot;markdown-toc-babelrc&quot;&gt;.babelrc&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bundler&quot; id=&quot;markdown-toc-bundler&quot;&gt;Bundler&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#indexhtml&quot; id=&quot;markdown-toc-indexhtml&quot;&gt;index.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#appjs&quot; id=&quot;markdown-toc-appjs&quot;&gt;app.js&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#실행&quot; id=&quot;markdown-toc-실행&quot;&gt;실행&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process&quot;&gt;Process&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;이번 포스팅에서 진행할 예제는 1:1 채팅이 아닌 1:N 채팅입니다&lt;/li&gt;
  &lt;li&gt;2개의 서버를 띄우고 Socket.io와 Socket.io-client로 양방향 통신을 할겁니다&lt;/li&gt;
  &lt;li&gt;Socket.io를 사용하는 Node.js(Express)와 MongoDB(Mongoose)로 서버를 구성합니다&lt;/li&gt;
  &lt;li&gt;React와 Socket.io-client를 사용하여 서버와 데이터를 주고 받을 겁니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;packagejson&quot;&gt;Package.json&lt;/h2&gt;

&lt;p&gt;이번 포스팅에서는 React의 빠른 환경 설정인 Create React App을 사용하지 않고   &lt;br /&gt;
직접 리액트 프로젝트를 세팅해 보도록 하죠 먼저 프로젝트 폴더를 하나 만들고&lt;br /&gt;
package.json 생성을 위해 터미널을 열어 아래의 명령어를 입력해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;-y 명령어를 사용하게 되면 package.json 생성 시 나오는 모든 문항에 ‘예’로 대답한 것과 같습니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;package.json 파일이 루트 경로에 생성되었다면 npm 명령어로 React를 설치합니다&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;react 
npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;react-dom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;ReactDOM에 대한 자세한 설명은 &lt;a href=&quot;https://ko.reactjs.org/docs/react-dom.html&quot; target=&quot;_blank&quot;&gt;공식문서&lt;/a&gt;를 참고해 주세요!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;babel&quot;&gt;Babel&lt;/h2&gt;

&lt;p&gt;ES6문법을 사용하기 위해서 Babel을 사용한 경험이 있으셨다면.. 리액트 문법 또한 Babel의 도움을 받아야 합니다 &lt;br /&gt;
Babel을 설치해보죠 터미널을 열어 아래의 명령어를 입력해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; @babel/preset-core @babel/preset-env @babel/preset-react
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;@babel/preset-core: ES6 문법을 ES5 문법으로 변환하기 위해 설치 &lt;br /&gt;
@babel/preset-env: 타깃 환경에 필요한 구문 변환과 브라우저 폴리필을 제공&lt;br /&gt;
@babel/preset-react: 리액트의 JSX 문법을 자바스크립트로 컴파일하기 위해 설치&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;babelrc&quot;&gt;.babelrc&lt;/h3&gt;

&lt;p&gt;루트 경로에 .babelrc 파일을 만들어 지역 설정을 합니다 presets과 plugins 옵션을 아래와 같이 지정해 주세요   &lt;br /&gt;
번들러에서 자동으로 루트 경로의 .babelrc 파일을 인식하고 적용할 겁니다&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;presets&quot;: [
      [&quot;@babel/preset-env&quot;, {
            &quot;targets&quot;: {
                &quot;browsers&quot;: ['&amp;gt; 1%', 'last 2 versions', 'Firefox ESR']
            }
      }],
      [&quot;@babel/preset-react&quot;]
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bundler&quot;&gt;Bundler&lt;/h2&gt;

&lt;p&gt;Webpack 혹은 Rollup을 자주 쓰는 편이지만 이번 프로젝트는 &lt;a href=&quot;https://ko.parceljs.org/&quot; target=&quot;_blank&quot;&gt;Parcel&lt;/a&gt; 번들러를 사용하여 진행해 보겠습니다  &lt;br /&gt;
그럼 번들러를 설치해보죠 터미널을 열어 아래의 명령어를 입력해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; parcel-bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;indexhtml&quot;&gt;index.html&lt;/h3&gt;

&lt;p&gt;번들러를 설치하였다면 바로 테스트를 해봐야 겠죠? &lt;br /&gt;
루트 경로에 ‘src’ 폴더를 하나 생성하고 index.html 파일을 하나 만들어 주세요&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Create React Project with Parcel&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;appjs&quot;&gt;app.js&lt;/h3&gt;

&lt;p&gt;생성한 ‘src’ 폴더에 app.js 파일을 하나 만들어 주세요&lt;br /&gt;
State Hook을 사용해서 간단하게 메시지의 상태를 바꾸는 버튼을 만들어 보죠&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react-dom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Will You Press The Button?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Oops!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;실행&quot;&gt;실행&lt;/h3&gt;

&lt;p&gt;package.json 파일을 열고 실행을 위한 스크립트를 추가해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
    &quot;start&quot;: &quot;parcel src/index.html&quot;,
    &quot;build&quot;: &quot;parcel build src/index.html --public-url=./&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;–public-url 옵션을 지정하게 되면 해당 파일을 기준으로 루트 경로가 설정됩니다!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;터미널을 열어 아래의 명령어로 번들링한 파일을 서버에 띄워보겠습니다&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;parcel src/index.html
// Server running at http://localhost:1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;브라우저를 열고 주소창에 http://localhost:1234를 입력하여 정상적으로 페이지가 나온다면 성공입니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-04-26/page.png&quot; alt=&quot;Local Page&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="react" /><summary type="html"></summary></entry><entry><title type="html">Load Balancer로 SSL 보안 인증서(Https) 추가하기(2)</title><link href="http://localhost:4000/blog/2021/01/23/aws-secure-socket-layer.html" rel="alternate" type="text/html" title="Load Balancer로 SSL 보안 인증서(Https) 추가하기(2)" /><published>2021-01-23T00:00:00+09:00</published><updated>2021-01-25T21:45:46+09:00</updated><id>http://localhost:4000/blog/2021/01/23/aws-secure-socket-layer</id><content type="html" xml:base="http://localhost:4000/blog/2021/01/23/aws-secure-socket-layer.html">&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#load-balancer&quot; id=&quot;markdown-toc-load-balancer&quot;&gt;Load Balancer&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#application-load-balancer&quot; id=&quot;markdown-toc-application-load-balancer&quot;&gt;Application Load Balancer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#listener&quot; id=&quot;markdown-toc-listener&quot;&gt;Listener&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#보안-설정-구성&quot; id=&quot;markdown-toc-보안-설정-구성&quot;&gt;보안 설정 구성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#보안-그룹-구성&quot; id=&quot;markdown-toc-보안-그룹-구성&quot;&gt;보안 그룹 구성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#라우팅-구성&quot; id=&quot;markdown-toc-라우팅-구성&quot;&gt;라우팅 구성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#대상-등록&quot; id=&quot;markdown-toc-대상-등록&quot;&gt;대상 등록&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#검토&quot; id=&quot;markdown-toc-검토&quot;&gt;검토&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#route53&quot; id=&quot;markdown-toc-route53&quot;&gt;Route53&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;load-balancer&quot;&gt;Load Balancer&lt;/h2&gt;

&lt;p&gt;들어가기에 앞서, AWS는 사용 편의성과 성능 개선을 위해 주기적으로 화면을 업데이트 하므로  &lt;br /&gt;
가장 최신의 포스팅을 찾아 참고하시는 것을 추천합니다. 이 포스팅은 2021년 1월 23일에 작성되었습니다.&lt;br /&gt;
&lt;a href=&quot;https://mujaen.github.io/blog/2021/01/21/aws-elastic-beanstalk.html&quot; target=&quot;_blank&quot;&gt;지난 포스팅&lt;/a&gt;에서 Elastic Beanstalk 생성할 때 로드밸런서를 이용하기 위해서 반드시 추가 옵션 구성으로  &lt;br /&gt;
로드밸런서를 등록해야 한다고 했었죠 이번 포스팅에서는 Application Load Balancer로 보안 인증서를 설정해 볼 겁니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-23/menu.png&quot; alt=&quot;Menu&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;로드밸런서 설정은 전체메뉴의 컴퓨팅 - EC2 - 로드 밸런싱 - 로드밸런서에서 설정할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;application-load-balancer&quot;&gt;Application Load Balancer&lt;/h3&gt;

&lt;p&gt;먼저, 로드밸런서 생성을 해보죠     &lt;br /&gt;
로드밸런서 설정 페이지에서 좌측 상단 ‘Load Balancer 생성’ 버튼을 눌러줍니다&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Application Load Balancer&lt;/li&gt;
  &lt;li&gt;Network Load Balancer&lt;/li&gt;
  &lt;li&gt;Classic Load Balancer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 옵션 중 Application Load Balancer을 선택해 줍니다    &lt;br /&gt;
Application Load Balancer는 HTTP 및 HTTPS 트래픽을 사용하는 웹 애플리케이션을 위한 기능을 제공합니다&lt;/p&gt;

&lt;h3 id=&quot;listener&quot;&gt;Listener&lt;/h3&gt;

&lt;p&gt;기본 구성에서 이름을 입력한 뒤 리스너를 생성해 줘야 하는데요 ‘리스너 추가’ 버튼을 눌러 아래와 같이 추가 합니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-23/listener.png&quot; alt=&quot;Listener&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;리스너는 구성한 프로토콜 및 포트를 사용하여 연결 요청을 확인하는 프로세스로 &lt;br /&gt;
443 포트에 SSL 인증서와 보안 정책을 설정하게 됩니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;보안-설정-구성&quot;&gt;보안 설정 구성&lt;/h3&gt;

&lt;p&gt;가용 영역(ap-northeast-2a~2d)을 지정한 뒤 추가 서비스와 태그는 생략하고 진행하겠습니다&lt;br /&gt;
이제 설정페이지 하단의 다음을 눌러 보안 설정을 하도록 하죠&lt;/p&gt;

&lt;p&gt;인증서 유형은 ‘ACM에서 인증서 선택’을 눌러주세요 정책은 원하는 보안 정책을 선택합니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-23/acm.png&quot; alt=&quot;ACM&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;보안-그룹-구성&quot;&gt;보안 그룹 구성&lt;/h3&gt;

&lt;p&gt;다음은 보안 그룹을 구성해야 하는데요 보안 그룹은 로드 밸런서에 대한 트래픽을 제어하는 방화벽 규칙 세트입니다&lt;br /&gt;
&lt;a href=&quot;https://mujaen.github.io/blog/2021/01/21/aws-elastic-beanstalk.html&quot; target=&quot;_blank&quot;&gt;지난 포스팅&lt;/a&gt;에서 Elastic Beanstalk로 애플리케이션을 만들 때 추가 옵션 구성을 통해 로드밸랜서를 설정하였다면 자동으로      &lt;br /&gt;
아래 ‘기존 보안 그룹 선택’ 리스트에 ELB 보안 그룹이 생성된 걸 확인할 수 있습니다 &lt;br /&gt;
리스트에서 Elastic Beanstalk created security group used when no ELB security groups… 항목을 찾아 체크를 합니다&lt;/p&gt;

&lt;h3 id=&quot;라우팅-구성&quot;&gt;라우팅 구성&lt;/h3&gt;

&lt;p&gt;로드 밸런서는 사용자가 지정한 프로토콜 및 포트를 사용하여 여기에 설정한 대상으로 요청을 라우팅하고    &lt;br /&gt;
대상에 대한 상태 점검을 수행할 겁니다 이 단계에서 지정한 대상 그룹은 이 로드 밸런서에 구성된 모든 수신기에 적용됩니다.&lt;br /&gt;
다른 부분은 기존 설정을 그대로 유지하고 이름만 변경한 뒤 다음 단계로 이동해 주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-23/routing.png&quot; alt=&quot;Routing&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;대상-등록&quot;&gt;대상 등록&lt;/h3&gt;

&lt;p&gt;‘등록된 항목에 추가’ 버튼을 눌러 등록된 대상에 인스턴스를 등록합니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-23/instance.png&quot; alt=&quot;Instance&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;검토&quot;&gt;검토&lt;/h3&gt;

&lt;p&gt;드디어 마지막 검토 단계입니다! 검토 단계에서는 이전 단계에서 등록한 내용이 맞는지 확인하고&lt;br /&gt;
이상이 없다면 우측 하단의 ‘생성’ 버튼을 눌러 로드 밸런서를 생성합니다.&lt;/p&gt;

&lt;h3 id=&quot;route53&quot;&gt;Route53&lt;/h3&gt;

&lt;p&gt;로드밸런서를 생성하였다고 바로 Https 연결이 되는 것은 아닙니다&lt;br /&gt;
&lt;a href=&quot;https://mujaen.github.io/blog/2021/01/18/aws-route-53.html&quot; target=&quot;_blank&quot;&gt;지난 포스팅&lt;/a&gt;에서 Route53에 등록된 레코드를 변경하는 방법을 참고해 주세요!&lt;/p&gt;

&lt;p&gt;이제 사이트에 제대로 적용이 되었는지 확인해 봐야겠죠?&lt;br /&gt;
브라우저를 열어 주소를 입력한 뒤 좌측의 자물쇠 아이콘을 누르면 정상적으로 보안 연결이 되어 있는 것을 확인할 수 있습니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-23/site.png&quot; alt=&quot;Site&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="aws" /><summary type="html"></summary></entry><entry><title type="html">Load Balancer로 SSL 보안 인증서(Https) 추가하기(1)</title><link href="http://localhost:4000/blog/2021/01/22/aws-certificate-manager.html" rel="alternate" type="text/html" title="Load Balancer로 SSL 보안 인증서(Https) 추가하기(1)" /><published>2021-01-22T00:00:00+09:00</published><updated>2021-01-23T19:45:19+09:00</updated><id>http://localhost:4000/blog/2021/01/22/aws-certificate-manager</id><content type="html" xml:base="http://localhost:4000/blog/2021/01/22/aws-certificate-manager.html">&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#certificate-manager&quot; id=&quot;markdown-toc-certificate-manager&quot;&gt;Certificate Manager&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#인증서-요청&quot; id=&quot;markdown-toc-인증서-요청&quot;&gt;인증서 요청&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#도메인-이름-추가&quot; id=&quot;markdown-toc-도메인-이름-추가&quot;&gt;도메인 이름 추가&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#검증&quot; id=&quot;markdown-toc-검증&quot;&gt;검증&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;certificate-manager&quot;&gt;Certificate Manager&lt;/h2&gt;

&lt;p&gt;들어가기에 앞서, AWS는 사용 편의성과 성능 개선을 위해 주기적으로 화면을 업데이트 하므로  &lt;br /&gt;
가장 최신의 포스팅을 찾아 참고하시는 것을 추천합니다. 이 포스팅은 2021년 1월 22일에 작성되었습니다.&lt;br /&gt;
AWS는 Certificate Manager에서 무료로 공인 인증서를 제공합니다 다만, 인증서를 적용할 로드밸런서는 요금이 부과됩니다&lt;br /&gt;
이번 포스팅에서는 AWS의 Certificate Manager에서 무료로 보안 인증서를 만들어 볼 겁니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-22/menu.png&quot; alt=&quot;Menu&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Certificate Manager 설정은 전체메뉴의 검색기능을 통해 접근할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;인증서-요청&quot;&gt;인증서 요청&lt;/h3&gt;

&lt;p&gt;인증서를 요청하기 전에 도메인은 미리 구입 하였다는 전제 하에 진행하도록 하죠   &lt;br /&gt;
Certificate Manager 설정 페이지에서 좌측 상단 ‘인증서 요청’ 버튼을 눌러줍니다&lt;/p&gt;

&lt;p&gt;공인 인증서 : ACM에서 발급하는 Amazon의 공인 인증서입니다 도메인 검증을 하기 때문에 별도의 알람이 발생하지 않습니다.&lt;br /&gt;
사설 인증서 : 도메인 검증을 하지 않기 때문에 알람이 발생하는 사설 CA 기반 인증서입니다&lt;/p&gt;

&lt;p&gt;위의 옵션 중 ‘공인 인증서 요청’을 선택해 줍니다 아래 ‘인증서 요청’ 버튼을 눌러줍니다.&lt;/p&gt;

&lt;h3 id=&quot;도메인-이름-추가&quot;&gt;도메인 이름 추가&lt;/h3&gt;

&lt;p&gt;도메인 이름을 추가해 주세요&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-22/domain.png&quot; alt=&quot;Domain&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;다른 이름을 추가하면 사용자가 등록된 여러 도메인으로 접속할 수 있습니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;검증&quot;&gt;검증&lt;/h3&gt;

&lt;p&gt;공인 인증서는 도메인 확인을 위해 DNS 검증과 이메일 검증을 진행해야 합니다&lt;br /&gt;
이번 포스팅에서는 DNS 검증을 통해 인증서를 요청할 겁니다&lt;/p&gt;

&lt;p&gt;태그 추가는 생략하고 넘어갈 수 있습니다 도메인 이름과 검증 방법을 선택했다면 ‘확인 및 요청’ 버튼을 눌러 &lt;br /&gt;
검토를 진행하게 됩니다 &lt;a href=&quot;https://mujaen.github.io/blog/2021/01/18/aws-route-53.html&quot; target=&quot;_blank&quot;&gt;지난 포스팅&lt;/a&gt;에서 Route53에 DNS 정보를 등록해서 도메인을 연결했었죠    &lt;br /&gt;
검증을 위해서 아래의 CNAME 기록을 Route53에 DNS 구성에 추가하면 검증이 완료됩니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-22/validation.png&quot; alt=&quot;Validation&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="aws" /><summary type="html"></summary></entry><entry><title type="html">Elastic Beanstalk로 애플리케이션 등록과 관리</title><link href="http://localhost:4000/blog/2021/01/21/aws-elastic-beanstalk.html" rel="alternate" type="text/html" title="Elastic Beanstalk로 애플리케이션 등록과 관리" /><published>2021-01-21T00:00:00+09:00</published><updated>2021-01-23T19:45:15+09:00</updated><id>http://localhost:4000/blog/2021/01/21/aws-elastic-beanstalk</id><content type="html" xml:base="http://localhost:4000/blog/2021/01/21/aws-elastic-beanstalk.html">&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#create&quot; id=&quot;markdown-toc-create&quot;&gt;Create&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#티어-선택&quot; id=&quot;markdown-toc-티어-선택&quot;&gt;티어 선택&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#이름-입력&quot; id=&quot;markdown-toc-이름-입력&quot;&gt;이름 입력&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#플랫폼-선택&quot; id=&quot;markdown-toc-플랫폼-선택&quot;&gt;플랫폼 선택&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#코드-등록&quot; id=&quot;markdown-toc-코드-등록&quot;&gt;코드 등록&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#delete&quot; id=&quot;markdown-toc-delete&quot;&gt;Delete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create&quot;&gt;Create&lt;/h2&gt;

&lt;p&gt;들어가기에 앞서, AWS는 사용 편의성과 성능 개선을 위해 주기적으로 화면을 업데이트 하므로  &lt;br /&gt;
가장 최신의 포스팅을 찾아 참고하시는 것을 추천합니다. 이 포스팅은 2021년 1월 21일에 작성되었습니다. &lt;br /&gt;
Elastic Beanstalk는 구축한 애플리케이션 서버를 관리할 때 사용되죠 오늘은 Elastic Beanstalk의 환경을 &lt;br /&gt;
생성해보고 관리하는 방법을 알아볼 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-21/menu.png&quot; alt=&quot;Menu&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Elastic Beanstalk 설정은 전체메뉴의 컴퓨팅 - Elastic Beanstalk에서 설정할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;티어-선택&quot;&gt;티어 선택&lt;/h3&gt;

&lt;p&gt;Elastic Beanstalk 환경 설정을 위해서 우측의 ‘새 환경 설정’ 버튼을 눌러 줍니다.&lt;br /&gt;
환경 티어 선택에서 ‘웹 서버 환경’을 선택하고 ‘선택’ 버튼을 눌러주세요&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-21/tier.png&quot; alt=&quot;Select Tier&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;이름-입력&quot;&gt;이름 입력&lt;/h3&gt;

&lt;p&gt;다음은 애플리케이션 이름을 입력해 줍니다 이름을 입력을 하게 되면 자동으로    &lt;br /&gt;
아래에 -env 가 붙은 환경 이름이 만들어지는 것을 확인할 수 있습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-21/name.png&quot; alt=&quot;Add Name&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이때, 환경 이름은 EC2에 자동으로 생성되는 인스턴스 명입니다!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;플랫폼-선택&quot;&gt;플랫폼 선택&lt;/h3&gt;

&lt;p&gt;Java, Ruby, Tomcat, Node.js, PHP 등 자신의 프로젝트에 해당되는 플랫폼을 선택하면 됩니다.       &lt;br /&gt;
저는 Tomcat으로 서버를 구동하기 때문에 Tomcat을 선택하고 진행하겠습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-21/platform.png&quot; alt=&quot;Select Platform&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;코드-등록&quot;&gt;코드 등록&lt;/h3&gt;

&lt;p&gt;따로 설정한 파일이 없으므로 샘플 애플리케이션을 사용하여 진행하겠습니다  &lt;br /&gt;
마지막으로 아래의 ‘환경 생성’ 버튼을 누르면 5-10분 뒤에 애플리케이션이 만들어진 것을 확인할 수 있습니다  &lt;br /&gt;
환경이 생성되면 EC2의 인스턴스도 자동으로 생성됩니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-21/code.png&quot; alt=&quot;Add Code&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘추가 옵션 구성’ 버튼을 누르면 추가적인 옵션을 선택할 수 있는데요      &lt;br /&gt;
만약 로드밸런서를 이용하여 보안 인증서를 등록하려면 반드시 이곳에서 설정해야   &lt;br /&gt;
나중에 다시 설치해야 하는 번거로움을 피할 수 있습니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;delete&quot;&gt;Delete&lt;/h2&gt;

&lt;p&gt;생성한 환경을 삭제해 보도록 하죠 해당 환경의 좌측 체크박스를 누른 뒤 우측의 작업을 눌러 ‘환경 종료’를&lt;br /&gt;
눌러주면 5-10분 뒤 환경이 종료되고 하루 정도 지나면 자동으로 리스트에서 삭제됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-21/delete.png&quot; alt=&quot;Delete&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Elastic Beanstalk 환경 설정은 전체메뉴의 컴퓨팅 - Elastic Beanstalk - 환경에서 설정할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="blog" /><category term="aws" /><summary type="html"></summary></entry><entry><title type="html">Route53으로 도메인 주소에 호스팅 연결하기</title><link href="http://localhost:4000/blog/2021/01/18/aws-route-53.html" rel="alternate" type="text/html" title="Route53으로 도메인 주소에 호스팅 연결하기" /><published>2021-01-18T00:00:00+09:00</published><updated>2021-01-24T18:20:23+09:00</updated><id>http://localhost:4000/blog/2021/01/18/aws-route-53</id><content type="html" xml:base="http://localhost:4000/blog/2021/01/18/aws-route-53.html">&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#route53&quot; id=&quot;markdown-toc-route53&quot;&gt;Route53&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#호스팅-영역&quot; id=&quot;markdown-toc-호스팅-영역&quot;&gt;호스팅 영역&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#레코드&quot; id=&quot;markdown-toc-레코드&quot;&gt;레코드&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#www&quot; id=&quot;markdown-toc-www&quot;&gt;www.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ipv4&quot; id=&quot;markdown-toc-ipv4&quot;&gt;IPv4&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#application-load-balancer&quot; id=&quot;markdown-toc-application-load-balancer&quot;&gt;Application Load Balancer&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;route53&quot;&gt;Route53&lt;/h2&gt;

&lt;p&gt;들어가기에 앞서, AWS는 사용 편의성과 성능 개선을 위해 주기적으로 화면을 업데이트 하므로  &lt;br /&gt;
가장 최신의 포스팅을 찾아 참고하시는 것을 추천합니다. 이 포스팅은 2021년 1월 18일에 작성되었습니다.  &lt;br /&gt;
이번 포스팅에서는 DNS가 무엇이고 어떤 역할을 하는지에 대해서 설명하진 않을 겁니다.&lt;br /&gt;
오늘은 Route53을 이용하여 호스팅 영역을 생성하고 DNS 쿼리로 도메인에 연결하는 방법을 알아 보도록 하죠&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-18/menu.png&quot; alt=&quot;Menu&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Route53 설정은 전체메뉴의 네트워킹 및 콘텐츠 전송 - Route 53에서 설정할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;호스팅-영역&quot;&gt;호스팅 영역&lt;/h3&gt;

&lt;p&gt;Route 53 대시보드에서 아래 그림의 호스팅 영역을 클릭해 주세요    &lt;br /&gt;
페이지가 이동되었다면 호스팅 영역을 새로 만들어 보죠 ‘호스팅 영역 생성’ 버튼을 눌러 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-18/hostedzone.png&quot; alt=&quot;Hosted zone&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;구입한 도메인 이름을 입력하고 ‘퍼블릭 호스팅 영역’ 유형을 선택한 뒤 호스팅 영역을 생성합니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;레코드&quot;&gt;레코드&lt;/h2&gt;

&lt;p&gt;호스팅 영역이 생성되고 자동으로 레코드가 2개 추가되어 있는 것을 확인 할 수 있습니다  &lt;br /&gt;
추가 된 NS 유형의 레코드의 4개의 값을 도메인을 구입한 사이트에 등록해서 연결하는 겁니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-18/record.png&quot; alt=&quot;Records&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;www&quot;&gt;www.&lt;/h3&gt;

&lt;p&gt;www. 으로 접근했을 때를 대비해서 레코드를 하나 더 추가해야 합니다 ‘레코드 생성’ 버튼을 눌러 아래와 같이 추가합니다        &lt;br /&gt;
이때, 레코드에 대한 별칭을 바꾸기 위해 우측의 별칭을 활성화해서 ‘이 호스팅 영역의 다른 레코드에 대한 별칭’을 선택합니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-18/create.png&quot; alt=&quot;Create Record&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ipv4&quot;&gt;IPv4&lt;/h3&gt;

&lt;p&gt;Route53에서 만든 호스팅과 실제 인스턴스의 IP 주소가 연결이 되어야 도메인이 정상적으로 연결 됩니다      &lt;br /&gt;
&lt;a href=&quot;https://mujaen.github.io/blog/2021/01/21/aws-elastic-beanstalk.html&quot; target=&quot;_blank&quot;&gt;지난 포스팅&lt;/a&gt;에서 자동으로 EC2 인스턴스가 생성되었죠 인스턴스에 퍼블릭 IPV4 주소가 있을 겁니다      &lt;br /&gt;
이 IP를 가지고 도메인에 연결하기 위해서 IPv4 주소 정보인 A 유형 레코드를 하나 더 추가해 줘야 합니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-18/public.png&quot; alt=&quot;Create A Record&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;application-load-balancer&quot;&gt;Application Load Balancer&lt;/h3&gt;

&lt;p&gt;만약 Application Load Balancer를 사용하여 라우팅 대상을 추가해야 한다면 레코드를 아래와 같이 설정해야 합니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-18/alb.png&quot; alt=&quot;Create A Record&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;IPv4 혹은 Application Load Balancer 둘 중 하나만 설정해서 총 4개의 레코드가 필요합니다&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="blog" /><category term="aws" /><summary type="html"></summary></entry><entry><title type="html">EC2로 서버와 데이터베이스(RDS) 보안그룹 설정하기(2)</title><link href="http://localhost:4000/blog/2021/01/17/aws-security-group.html" rel="alternate" type="text/html" title="EC2로 서버와 데이터베이스(RDS) 보안그룹 설정하기(2)" /><published>2021-01-17T00:00:00+09:00</published><updated>2021-01-23T19:45:10+09:00</updated><id>http://localhost:4000/blog/2021/01/17/aws-security-group</id><content type="html" xml:base="http://localhost:4000/blog/2021/01/17/aws-security-group.html">&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#ec2&quot; id=&quot;markdown-toc-ec2&quot;&gt;EC2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#보안-그룹&quot; id=&quot;markdown-toc-보안-그룹&quot;&gt;보안 그룹&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#vpc&quot; id=&quot;markdown-toc-vpc&quot;&gt;VPC&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#인바운드-규칙&quot; id=&quot;markdown-toc-인바운드-규칙&quot;&gt;인바운드 규칙&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#아웃바운드-규칙&quot; id=&quot;markdown-toc-아웃바운드-규칙&quot;&gt;아웃바운드 규칙&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#db-인스턴스&quot; id=&quot;markdown-toc-db-인스턴스&quot;&gt;DB 인스턴스&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ec2&quot;&gt;EC2&lt;/h2&gt;

&lt;p&gt;들어가기에 앞서, AWS는 사용 편의성과 성능 개선을 위해 주기적으로 화면을 업데이트 하므로  &lt;br /&gt;
가장 최신의 포스팅을 찾아 참고하시는 것을 추천합니다. 이 포스팅은 2021년 1월 17일에 작성되었습니다. &lt;br /&gt;
EC2는 가상 서버를 구축하고 보안 및 네트워크 구성과 스토리지 관리를 지원하죠 오늘은 EC2의 보안설정을 통해  &lt;br /&gt;
데이터베이스(RDS)를 보호하는 방법을 알아볼 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-16/menu.png&quot; alt=&quot;Menu&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;보안설정은 전체메뉴의 컴퓨팅 - EC2 - 네트워크 및 보안 - 보안 그룹에서 설정할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;보안-그룹&quot;&gt;보안 그룹&lt;/h2&gt;

&lt;p&gt;RDS는 미리 설치되어 있다는 전제 하에 진행하도록 하겠습니다&lt;br /&gt;
보안 그룹 페이지에 들어오면 현재 생성된 보안그룹 리스트를 확인할 수 있습니다. &lt;br /&gt;
우측 상단의 ‘보안 그룹 생성’ 버튼을 클릭하여 보안 그룹을 하나 만들어 보도록 하죠&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-16/register.png&quot; alt=&quot;Register Button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;등록 페이지로 들어오면 보안 그룹의 기본 세부 정보를 입력합니다. 저는 데이터베이스의 보안 그룹을 만들 것이므로   &lt;br /&gt;
보안 그룹의 이름과 간단한 설명 그리고 VPC를 선택할 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-17/info.png&quot; alt=&quot;Register Button&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vpc&quot;&gt;VPC&lt;/h3&gt;

&lt;p&gt;Amazon Virtual Private Cloud(VPC)를 이용하면 사용자가 정의한 가상 네트워크로 AWS 리소스를 시작할 수 있습니다.&lt;br /&gt;
자세한 내용은 설명서의 &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/what-is-amazon-vpc.html&quot; target=&quot;_blank&quot;&gt;VPC&lt;/a&gt;를 참고해 주세요.&lt;/p&gt;

&lt;h3 id=&quot;인바운드-규칙&quot;&gt;인바운드 규칙&lt;/h3&gt;

&lt;p&gt;인바운드 규칙은 서버와 데이터베이스로 접근하는 데이터가 들어올 수 있도록 규칙을 정의하는 것입니다&lt;br /&gt;
만약 외부인이 DB에 접근해서 악의적으로 데이터를 조작하게 된다면 큰 문제가 되겠죠?   &lt;br /&gt;
그렇기에 굉장히 중요한 작업입니다. 그럼 ‘규칙 추가’ 버튼을 눌러 아래와 같이 추가해 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-17/inbound.png&quot; alt=&quot;InBound&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저, 유형은 RDS의 DB 엔진으로 지정해야 합니다 저는 MYSQL/Aurora로 만들겠습니다&lt;br /&gt;
제일 중요한 소스는 데이터베이스에 접근해야 될 IP 주소를 등록해주면 됩니다&lt;/p&gt;

&lt;h3 id=&quot;아웃바운드-규칙&quot;&gt;아웃바운드 규칙&lt;/h3&gt;

&lt;p&gt;인바운드 규칙과 반대로 데이터를 서버와 데이터베이스에서 내보낼 수 있도록 규칙을 정의하는 것입니다&lt;br /&gt;
아웃바운드의 경우 기본 설정된 모든 트래픽 유형 하나만 추가하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-16/outbound.png&quot; alt=&quot;OutBound&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하단의 ‘보안 그룹 생성’ 버튼을 눌러주면 리스트에 새로 추가된 보안 그룹을 확인할 수 있습니다.&lt;br /&gt;
그럼 이제 생성한 보안 그룹을 DB 인스턴스에 적용해 봐야겠죠?&lt;/p&gt;

&lt;h3 id=&quot;db-인스턴스&quot;&gt;DB 인스턴스&lt;/h3&gt;

&lt;p&gt;RDS를 설치하게 되면 자동으로 DB 인스턴스가 생성되는데요 해당 인스턴스에 조금 전에 설정했던   &lt;br /&gt;
보안 그룹을 추가하기 위해 아래의 메뉴로 이동합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-17/menu2.png&quot; alt=&quot;Menu&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DB 인스턴스 설정은 전체메뉴의 데이터베이스 - RDS - DB 인스턴스 혹은 데이터베이스에서 설정할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;페이지로 이동하면 생성된 데이터베이스 리스트가 보입니다. 설정하고 싶은 데이터베이스의 좌측 체크박스를 누른 뒤&lt;br /&gt;
우측의 수정 버튼을 눌러 상세페이지로 이동합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-17/instance.png&quot; alt=&quot;Instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;상세페이지의 연결 섹션에서 검색을 통해 새로 만든 보안 그룹을 추가해주면 보안 그룹 설정이 완료됩니다.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="aws" /><summary type="html"></summary></entry><entry><title type="html">EC2로 서버와 데이터베이스(RDS) 보안그룹 설정하기(1)</title><link href="http://localhost:4000/blog/2021/01/16/aws-security-group.html" rel="alternate" type="text/html" title="EC2로 서버와 데이터베이스(RDS) 보안그룹 설정하기(1)" /><published>2021-01-16T00:00:00+09:00</published><updated>2021-01-23T19:45:05+09:00</updated><id>http://localhost:4000/blog/2021/01/16/aws-security-group</id><content type="html" xml:base="http://localhost:4000/blog/2021/01/16/aws-security-group.html">&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#ec2&quot; id=&quot;markdown-toc-ec2&quot;&gt;EC2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#보안-그룹&quot; id=&quot;markdown-toc-보안-그룹&quot;&gt;보안 그룹&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#vpc&quot; id=&quot;markdown-toc-vpc&quot;&gt;VPC&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#인바운드-규칙&quot; id=&quot;markdown-toc-인바운드-규칙&quot;&gt;인바운드 규칙&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#아웃바운드-규칙&quot; id=&quot;markdown-toc-아웃바운드-규칙&quot;&gt;아웃바운드 규칙&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#인스턴스&quot; id=&quot;markdown-toc-인스턴스&quot;&gt;인스턴스&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ec2&quot;&gt;EC2&lt;/h2&gt;

&lt;p&gt;들어가기에 앞서, AWS는 사용 편의성과 성능 개선을 위해 주기적으로 화면을 업데이트 하므로  &lt;br /&gt;
가장 최신의 포스팅을 찾아 참고하시는 것을 추천합니다. 이 포스팅은 2021년 1월 16일에 작성되었습니다. &lt;br /&gt;
EC2는 가상 서버를 구축하고 보안 및 네트워크 구성과 스토리지 관리를 지원하죠 오늘은 EC2의 보안설정을 통해  &lt;br /&gt;
서버를 보호하는 방법을 알아볼 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-16/menu.png&quot; alt=&quot;Menu&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;보안설정은 전체메뉴의 컴퓨팅 - EC2 - 네트워크 및 보안 - 보안 그룹에서 설정할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;보안-그룹&quot;&gt;보안 그룹&lt;/h2&gt;

&lt;p&gt;인스턴스는 미리 설치되어 있다는 전제 하에 진행하도록 하겠습니다&lt;br /&gt;
보안 그룹 페이지에 들어오면 현재 생성된 보안그룹 리스트를 확인할 수 있습니다. &lt;br /&gt;
우측 상단의 ‘보안 그룹 생성’ 버튼을 클릭하여 보안 그룹을 하나 만들어 보도록 하죠&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-16/register.png&quot; alt=&quot;Register Button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;등록 페이지로 들어오면 보안 그룹의 기본 세부 정보를 입력합니다. 저는 server의 보안 그룹을 만들 것이므로   &lt;br /&gt;
보안 그룹의 이름과 간단한 설명 그리고 VPC를 선택할 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-16/info.png&quot; alt=&quot;Register Button&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vpc&quot;&gt;VPC&lt;/h3&gt;

&lt;p&gt;Amazon Virtual Private Cloud(VPC)를 이용하면 사용자가 정의한 가상 네트워크로 AWS 리소스를 시작할 수 있습니다.&lt;br /&gt;
자세한 내용은 설명서의 &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/what-is-amazon-vpc.html&quot; target=&quot;_blank&quot;&gt;VPC&lt;/a&gt;를 참고해 주세요.&lt;/p&gt;

&lt;h3 id=&quot;인바운드-규칙&quot;&gt;인바운드 규칙&lt;/h3&gt;

&lt;p&gt;인바운드 규칙은 서버와 데이터베이스로 접근하는 데이터가 들어올 수 있도록 규칙을 정의하는 것입니다&lt;br /&gt;
만약 외부인이 DB에 접근해서 악의적으로 데이터를 조작하게 된다면 큰 문제가 되겠죠?   &lt;br /&gt;
그렇기에 굉장히 중요한 작업입니다. 그럼 ‘규칙 추가’ 버튼을 눌러 아래와 같이 추가해 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-16/inbound.png&quot; alt=&quot;InBound&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2개 포트에 대한 규칙을 추가해 줘야 합니다 HTTP와 SSH를 설정해야 하는데요    &lt;br /&gt;
HTTP 80번 포트는 외부인들도 접근이 가능해야 하므로 모든 IPv4 트래픽(0.0.0.0/0)과 IPv6 트래픽(::/0)을 설정해 줘야 합니다. &lt;br /&gt;
SSH 22번 포트는 본인 혹은 권한이 있는 사람만 접속돼야 하므로 해당 IP 주소만 등록합니다&lt;/p&gt;

&lt;h3 id=&quot;아웃바운드-규칙&quot;&gt;아웃바운드 규칙&lt;/h3&gt;

&lt;p&gt;인바운드 규칙과 반대로 데이터를 서버와 데이터베이스에서 내보낼 수 있도록 규칙을 정의하는 것입니다&lt;br /&gt;
아웃바운드의 경우 기본 설정된 모든 트래픽 유형 하나만 추가하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-16/outbound.png&quot; alt=&quot;OutBound&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하단의 ‘보안 그룹 생성’ 버튼을 눌러주면 리스트에 새로 추가된 보안 그룹을 확인할 수 있습니다.&lt;br /&gt;
그럼 이제 생성한 보안 그룹을 인스턴스에 적용해 봐야겠죠?&lt;/p&gt;

&lt;h3 id=&quot;인스턴스&quot;&gt;인스턴스&lt;/h3&gt;

&lt;p&gt;서버를 설치하게 되면 자동으로 인스턴스가 생성되는데요 해당 인스턴스에 조금 전에 설정했던   &lt;br /&gt;
보안 그룹을 추가하기 위해 아래의 메뉴로 이동합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-16/menu2.png&quot; alt=&quot;Menu&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인스턴스 설정은 전체메뉴의 컴퓨팅 - EC2 - 인스턴스 - 인스턴스에서 설정할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;페이지로 이동하면 생성된 인스턴트 리스트가 보입니다. 설정하고 싶은 인스턴스의 좌측 체크박스를 누른 뒤&lt;br /&gt;
우측의 작업 - 보안 - 보안 그룹 변경을 눌러 상세페이지로 이동합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-16/instance.png&quot; alt=&quot;Instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;연결된 보안 그룹에서 검색을 통해 새로 만든 보안 그룹을 추가해주면 보안 그룹 설정이 완료됩니다.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="aws" /><summary type="html"></summary></entry><entry><title type="html">Mongoose(Express)로 MongoDB 데이터 추가하기(2)</title><link href="http://localhost:4000/blog/2021/01/13/nodejs-express-mongodb-mongoose.html" rel="alternate" type="text/html" title="Mongoose(Express)로 MongoDB 데이터 추가하기(2)" /><published>2021-01-13T00:00:00+09:00</published><updated>2021-01-16T16:43:19+09:00</updated><id>http://localhost:4000/blog/2021/01/13/nodejs-express-mongodb-mongoose</id><content type="html" xml:base="http://localhost:4000/blog/2021/01/13/nodejs-express-mongodb-mongoose.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#model&quot; id=&quot;markdown-toc-model&quot;&gt;Model&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#defining-schema&quot; id=&quot;markdown-toc-defining-schema&quot;&gt;Defining Schema&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#view&quot; id=&quot;markdown-toc-view&quot;&gt;View&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#routes&quot; id=&quot;markdown-toc-routes&quot;&gt;Routes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pug&quot; id=&quot;markdown-toc-pug&quot;&gt;Pug&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#controller&quot; id=&quot;markdown-toc-controller&quot;&gt;Controller&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#folder-structure&quot; id=&quot;markdown-toc-folder-structure&quot;&gt;Folder Structure&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;model&quot;&gt;Model&lt;/h2&gt;

&lt;p&gt;지난 포스팅에서는 Mongoose의 create함수를 이용하여 DB에 데이터를 추가 해봤는데요&lt;br /&gt;
이번에는 DB에 하나씩 추가되는게 아닌 아래의 그림과 같이 타입별로 데이터가 추가되고&lt;br /&gt;
여러개의 데이터를 result 배열에 담아서 DB에 저장하는 예제를 통해 데이터 업데이트 방법을 알아볼 겁니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-13/user.png&quot; alt=&quot;FolderStructure&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;모든 파일 경로는 &lt;a href=&quot;https://mujaen.github.io/blog/2021/01/10/nodejs-express-mongodb-mongoose.html&quot; target=&quot;_blank&quot;&gt;지난 포스팅&lt;/a&gt;에서 설정한 그대로 진행하니 참고해 주세요!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;defining-schema&quot;&gt;Defining Schema&lt;/h3&gt;

&lt;p&gt;먼저, 스키마를 수정해 보죠 type 으로 유저를 구분할 것이기 때문에 값을 String으로 받는  &lt;br /&gt;
type 이라는 key를 하나 추가해서 모델을 하나 만들어 내보냅니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;view&quot;&gt;View&lt;/h2&gt;

&lt;p&gt;모델을 수정하였다면 지난 포스팅에서 만든 등록페이지와 라우팅을 수정합니다. &lt;br /&gt;
Pug와 Router 설정은 &lt;a href=&quot;https://mujaen.github.io/blog/2021/01/05/nodejs-express-mongodb-mongoose.html&quot; target=&quot;_blank&quot;&gt;지난 포스팅&lt;/a&gt;을 참고해 주세요!&lt;/p&gt;

&lt;h3 id=&quot;routes&quot;&gt;Routes&lt;/h3&gt;

&lt;p&gt;라우팅은 수정없이 registerUser 그대로 사용하겠습니다 아래와 같이 설정해 주세요.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;../controllers/user&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/user/register&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/api/user/list&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pug&quot;&gt;Pug&lt;/h3&gt;

&lt;p&gt;register.pug 파일을 열고 아래와 같이 수정해 주세요. &lt;br /&gt;
등록되는 유저를 select로 Admin과 Guest로 구분할 겁니다&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-pug&quot;&gt;doctype html
html
	head
		title 유저 등록
	body
		form(method=&quot;post&quot;, action=&quot;/api/user/list&quot;)
                        select(name=&quot;type&quot; id=&quot;&quot;)
                                option(value=&quot;admin&quot; selected) Admin
                                option(value=&quot;guest&quot;) Guest
                        input(type=&quot;text&quot; name=&quot;name&quot; value=&quot;&quot;)
                        input(type=&quot;text&quot; name=&quot;age&quot; value=&quot;&quot;)
                        button(type=&quot;submit&quot;) 저장
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;controller&quot;&gt;Controller&lt;/h2&gt;

&lt;p&gt;이제 제일 중요한 컨트롤러를 수정해보죠. controllers 폴더의 user.js 파일을 열고 아래와 같이 수정합니다        &lt;br /&gt;
registerUser를 같이 보죠. 등록페이지의 form에서 submit 이벤트가 발생하면 req.body를 사용해서   &lt;br /&gt;
request로 type의 값을 받아올 겁니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;../models/user&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;user/register&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;upsert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/user/register&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;updateOne 함수로 DB에 데이터를 업데이트 해보죠 try와 catch를 이용합니다&lt;br /&gt;
첫 번째 인자는 데이터를 filter 할 수 있도록 하는데요 type을 가지고 구분할 것이므로 type 값을 넘겨줍니다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;upsert 옵션은 업데이트할 시 DB에 데이터가 없는 경우 자동으로 데이터를 insert 해줍니다&lt;br /&gt;
이때, 변경하고 싶은 데이터를 $set으로 지정해 주지 않으면 해당 데이터를 제외한 다른 데이터는 모두 지워집니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;folder-structure&quot;&gt;Folder Structure&lt;/h3&gt;

&lt;p&gt;전체 폴더 구조입니다. 궁금한 내용은 아래 댓글로 남겨주세요! &lt;br /&gt;
다음 포스팅에서는 DB에 추가된 데이터를 업데이트 하는 내용을 진행하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2021-01-10/folder.png&quot; alt=&quot;FolderStructure&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="nodejs" /><summary type="html"></summary></entry></feed>